Index: include/llvm/InitializePasses.h
===================================================================
--- include/llvm/InitializePasses.h	(revision 254850)
+++ include/llvm/InitializePasses.h	(working copy)
@@ -19,6 +19,22 @@

 class PassRegistry;

+#ifdef TSAR_PROJECT
+
+/// initializeTSAR - Initialize all passes linked into the
+/// TSAR project.
+void initializeTSAR(PassRegistry &Registry);
+
+void initializePrivateRecognitionPassPass(PassRegistry &Registry);
+
+void initializeTransformationEnginePassPass(PassRegistry &Registry);
+
+void initializePrivateCClassifierPassPass(PassRegistry &Registry);
+
+void initializeInstrumentationPassPass(PassRegistry &Registry);
+
+#endif//TSAR_PROJECT
+
 /// initializeCore - Initialize all passes linked into the
 /// TransformUtils library.
 void initializeCore(PassRegistry&);

Index: include/llvm/LinkAllPasses.h
===================================================================
--- include/llvm/LinkAllPasses.h	(revision 254850)
+++ include/llvm/LinkAllPasses.h	(working copy)
@@ -39,6 +39,10 @@
 #include "llvm/Support/Valgrind.h"
 #include <cstdlib>

+#ifdef TSAR_PROJECT
+#include "tsar_pass.h"
+#endif//TSAR_PROJECT
+
 namespace {
   struct ForcePassLinking {
     ForcePassLinking() {
@@ -49,6 +53,13 @@
       if (std::getenv("bar") != (char*) -1)
         return;

+#ifdef TSAR_PROJECT
+      (void) llvm::createPrivateRecognitionPass();
+      (void) llvm::createTransfomrationEnginePass();
+      (void) llvm::createPrivateCClassifierPass();
+      (void) llvm::createInstrumentationPass();
+#endif//TSAR_PROJECT
+
       (void) llvm::createAAEvalPass();
       (void) llvm::createAggressiveDCEPass();
       (void) llvm::createBitTrackingDCEPass();
