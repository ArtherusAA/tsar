Index: include/clang/AST/ASTImporter.h
===================================================================
--- include/clang/AST/ASTImporter.h	(revision 298000)
+++ include/clang/AST/ASTImporter.h	(working copy)
@@ -38,6 +38,7 @@
   /// \brief Imports selected nodes from one AST context into another context,
   /// merging AST nodes where appropriate.
   class ASTImporter {
+   friend class VariableArrayCallback;
   public:
     typedef llvm::DenseSet<std::pair<Decl *, Decl *> > NonEquivalentDeclSet;
     typedef llvm::DenseMap<const CXXBaseSpecifier *, CXXBaseSpecifier *>
Index: lib/AST/ASTImporter.cpp
===================================================================
--- lib/AST/ASTImporter.cpp	(revision 298000)
+++ lib/AST/ASTImporter.cpp	(working copy)
@@ -3072,6 +3072,8 @@
   if (ToD)
     return ToD;

+  const FunctionDecl *FoundWithoutBody = nullptr;
+
   // Try to find a function in our own ("to") context with the same name, same
   // type, and in the same context as the function we're importing.
   if (!LexicalDC->isFunctionOrMethod()) {
@@ -3089,6 +3091,13 @@
           if (Importer.IsStructurallyEquivalent(D->getType(),
                                                 FoundFunction->getType())) {
             // FIXME: Actually try to merge the body and other attributes.
+            const FunctionDecl *FromBodyDecl = nullptr;
+            D->hasBody(FromBodyDecl);
+            if (D == FromBodyDecl && !FoundFunction->hasBody()) {
+              // This function is needed to merge completely.
+              FoundWithoutBody = FoundFunction;
+              break;
+            }
             return Importer.Imported(D, FoundFunction);
           }

@@ -3239,6 +3248,12 @@
   }
   ToFunction->setParams(Parameters);

+  if (FoundWithoutBody) {
+    auto *Recent = const_cast<FunctionDecl *>(
+      FoundWithoutBody->getMostRecentDecl());
+    ToFunction->setPreviousDecl(Recent);
+  }
+
   if (usedDifferentExceptionSpec) {
     // Update FunctionProtoType::ExtProtoInfo.
     QualType T = Importer.Import(D->getType());
