Index: include/llvm/Analysis/LoopInfo.h
===================================================================
--- include/llvm/Analysis/LoopInfo.h	(revision 235556)
+++ include/llvm/Analysis/LoopInfo.h	(working copy)
@@ -438,6 +438,34 @@
 
   void dump() const;
 
+#ifdef TSAR_PROJECT
+  /// \brief Return the debug location of the start of this loop.
+  /// This looks for a BB terminating instruction with a known debug
+  /// location by looking at the preheader and header blocks. If it
+  /// cannot find a terminating instruction with location information,
+  /// it returns an unknown location.
+  DebugLoc getStartLoc( ) const {
+      DebugLoc StartLoc;
+      BasicBlock *HeadBB;
+
+      // Try the pre-header first.
+      if ((HeadBB = getLoopPreheader( )) != nullptr)
+      {
+          StartLoc = HeadBB->getTerminator( )->getDebugLoc( );
+          if (!StartLoc.isUnknown( ))
+              return StartLoc;
+      }
+
+      // If we have no pre-header or there are no instructions with debug
+      // info in it, try the header.
+      HeadBB = getHeader( );
+      if (HeadBB)
+          StartLoc = HeadBB->getTerminator( )->getDebugLoc( );
+
+      return StartLoc;
+  }
+#endif//TSAR_PROJECT
+
 private:
   friend class LoopInfoBase<BasicBlock, Loop>;
   explicit Loop(BasicBlock *BB) : LoopBase<BasicBlock, Loop>(BB) {}
Index: include/llvm/Support/DebugLoc.h
===================================================================
--- include/llvm/Support/DebugLoc.h	(revision 235556)
+++ include/llvm/Support/DebugLoc.h	(working copy)
@@ -21,6 +21,9 @@
   template <typename T> struct DenseMapInfo;
   class MDNode;
   class LLVMContext;
+#ifdef TSAR_PROJECT
+  class raw_ostream;
+#endif//TSAR_PROJECT
 
   /// DebugLoc - Debug location id.  This is carried by Instruction, SDNode,
   /// and MachineInstr to compactly encode file/line/scope information for an
@@ -100,6 +103,10 @@
     bool operator!=(const DebugLoc &DL) const { return !(*this == DL); }
 
     void dump(const LLVMContext &Ctx) const;
+#ifdef TSAR_PROJECT
+    /// \brief prints source location /path/to/file.exe:line:col @[inlined at]
+    void print(const LLVMContext &Ctx, raw_ostream &OS) const;
+#endif TSAR_PROJECT
   };
 
   template <>
Index: lib/IR/DebugLoc.cpp
===================================================================
--- lib/IR/DebugLoc.cpp	(revision 235556)
+++ lib/IR/DebugLoc.cpp	(working copy)
@@ -146,6 +146,31 @@
 #endif
 }
 
+#ifdef TSAR_PROJECT
+void DebugLoc::print(const LLVMContext &Ctx, raw_ostream &OS) const {
+    if (!isUnknown( ))
+    {
+        // Print source line info.
+        DIScope Scope(getScope(Ctx));
+        assert((!Scope || Scope.isScope( )) &&
+               "Scope of a DebugLoc should be null or a DIScope.");
+        if (Scope)
+            OS << Scope.getFilename( );
+        else
+            OS << "<unknown>";
+        OS << ':' << getLine( );
+        if (getCol( ) != 0)
+            OS << ':' << getCol( );
+        DebugLoc InlinedAtDL = DebugLoc::getFromDILocation(getInlinedAt(Ctx));
+        if (!InlinedAtDL.isUnknown( ))
+        {
+            OS << " @[ ";
+            InlinedAtDL.print(Ctx, OS);
+            OS << " ]";
+        }
+    }
+}
+#endif//TSAR_PROJECT
 //===----------------------------------------------------------------------===//
 // DenseMap specialization
 //===----------------------------------------------------------------------===//
